<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
    <sitecore>
        <pipelines>
            <startAnalytics>
                <processor type="ActiveCommerce.Training.CartPersistence.Pipelines.Analytics.LoadShoppingCart, ActiveCommerce.Training.CartPersistence" />
            </startAnalytics>
            <endAnalytics>
                <processor type="ActiveCommerce.Training.CartPersistence.Pipelines.Analytics.PersistShoppingCart, ActiveCommerce.Training.CartPersistence"
                           patch:before="processor[1]"/>
            </endAnalytics>

            <acPersistCart>
                <!--<processor type="ActiveCommerce.Training.CartPersistence.Pipelines.PersistCart.PersistToSharedSession, ActiveCommerce.Training.CartPersistence" />-->
                <processor type="ActiveCommerce.Training.CartPersistence.Pipelines.PersistCart.CheckCartUpdated, ActiveCommerce.Training.CartPersistence" />
                <processor type="ActiveCommerce.Training.CartPersistence.Pipelines.PersistCart.CheckArgs, ActiveCommerce.Training.CartPersistence" />
                <processor type="ActiveCommerce.Training.CartPersistence.Pipelines.PersistCart.ReadFromCart, ActiveCommerce.Training.CartPersistence" />
                <processor type="ActiveCommerce.Training.CartPersistence.Pipelines.PersistCart.PersistToContact, ActiveCommerce.Training.CartPersistence" />
                <!--<processor type="ActiveCommerce.Training.CartPersistence.Pipelines.PersistCart.PersistToCookie, ActiveCommerce.Training.CartPersistence" />
                <processor type="ActiveCommerce.Training.CartPersistence.Pipelines.PersistCart.PersistToCustomer, ActiveCommerce.Training.CartPersistence" />-->
            </acPersistCart>
          
            <acRestoreCart>
                <!--<processor type="ActiveCommerce.Training.CartPersistence.Pipelines.RestoreCart.RestoreFromSharedSession, ActiveCommerce.Training.CartPersistence" />-->
                <processor type="ActiveCommerce.Training.CartPersistence.Pipelines.RestoreCart.AttachCartUpdatedHandler, ActiveCommerce.Training.CartPersistence" />
                <processor type="ActiveCommerce.Training.CartPersistence.Pipelines.RestoreCart.CheckPersistenceInitialized, ActiveCommerce.Training.CartPersistence" />
                <processor type="ActiveCommerce.Training.CartPersistence.Pipelines.RestoreCart.CheckArgs, ActiveCommerce.Training.CartPersistence" />
                <processor type="ActiveCommerce.Training.CartPersistence.Pipelines.RestoreCart.ReadFromContact, ActiveCommerce.Training.CartPersistence" /> 
                <!--<processor type="ActiveCommerce.Training.CartPersistence.Pipelines.RestoreCart.ReadFromCookie, ActiveCommerce.Training.CartPersistence" />
                <processor type="ActiveCommerce.Training.CartPersistence.Pipelines.RestoreCart.ReadFromCustomer, ActiveCommerce.Training.CartPersistence" />-->
                <processor type="ActiveCommerce.Training.CartPersistence.Pipelines.RestoreCart.RestoreCouponCode, ActiveCommerce.Training.CartPersistence" />
                <processor type="ActiveCommerce.Training.CartPersistence.Pipelines.RestoreCart.RestoreProducts, ActiveCommerce.Training.CartPersistence" />
                <processor type="ActiveCommerce.Training.CartPersistence.Pipelines.RestoreCart.AddResultToSession, ActiveCommerce.Training.CartPersistence" />
                <processor type="ActiveCommerce.Training.CartPersistence.Pipelines.RestoreCart.SetPersistenceInitialized, ActiveCommerce.Training.CartPersistence" />
            </acRestoreCart>
          
            <acRestoreCartProduct>
                <processor type="ActiveCommerce.Training.CartPersistence.Pipelines.RestoreCartProduct.CheckArgs, ActiveCommerce.Training.CartPersistence" />
                <processor type="ActiveCommerce.Training.CartPersistence.Pipelines.RestoreCartProduct.CheckProductInCart, ActiveCommerce.Training.CartPersistence" />
                <processor type="ActiveCommerce.Training.CartPersistence.Pipelines.RestoreCartProduct.CheckProductAvailable, ActiveCommerce.Training.CartPersistence" />
                <processor type="ActiveCommerce.Training.CartPersistence.Pipelines.RestoreCartProduct.CheckProductStock, ActiveCommerce.Training.CartPersistence" />
                <processor type="ActiveCommerce.Training.CartPersistence.Pipelines.RestoreCartProduct.AddProductToCart, ActiveCommerce.Training.CartPersistence" />
            </acRestoreCartProduct>
        </pipelines>

      <model>
        <elements>
          <element interface="ActiveCommerce.Training.CartPersistence.Analytics.Model.IShoppingCart, ActiveCommerce.Training.CartPersistence"
                   implementation="ActiveCommerce.Training.CartPersistence.Analytics.Model.ShoppingCart, ActiveCommerce.Training.CartPersistence" />
          <element interface="ActiveCommerce.Training.CartPersistence.Analytics.Model.IShoppingCartLine, ActiveCommerce.Training.CartPersistence"
                   implementation="ActiveCommerce.Training.CartPersistence.Analytics.Model.ShoppingCartLine, ActiveCommerce.Training.CartPersistence" />
        </elements>
        <entities>
          <contact>
            <facets>
              <facet name="Cart" contract="ActiveCommerce.Training.CartPersistence.Analytics.Model.IShoppingCart, ActiveCommerce.Training.CartPersistence" />
            </facets>
          </contact>
        </entities>
      </model>

      <settings>
        <!-- Sets if the Cart Persistance is active or not.
             If Empty the default is False.-->
        <setting name="ActiveCommerce.Cart.Persistence.Active" value="true" />

        <!-- The Customer Restore Strategy.
             This defines how the restore is handled in the event where the User 
             has a cart before signing in, and a cart exists on the registered user.
             
             Options:
             None = The users prior cart is used, overwritting the stored values on the Registered User on the next basket update.
             Merge = This merges the previous and the stored carts.
             Overwrite = This overwrites the previous basket with the one stored on the Registered User
             OverwriteIfEmpty = This overwrites the previous basket, only if the current basket is empty

             If Empty the default is "None".
        -->
        <setting name="ActiveCommerce.Cart.Persistence.CustomerRestoreStrategy" value="Merge" />
      </settings>
    </sitecore>
</configuration>